buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven {
            // Required for the curseforge task
            name = "gradle"
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.1.0'
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = mc_version + "-" + dlib_version
group = "com.shinoow.darknesslib" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "DarknessLib"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = mc_version + "-" + forge_version
    runDir = "run"
    
    mappings = "stable_nodoc_39"
    makeObfSourceJar = false

    replace "FORGEVERSION", forge_version
	replace "@DLIB_VERSION@", dlib_version
	replace "@CERT_FINGERPRINT@", project.findProperty('signSHA1')
}

dependencies {

}

processResources {
	// I really don't want that file to exist anywhere
	exclude '**/Thumbs.db'

    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
		include 'version.properties'
                
        // replace version and mcversion
        expand ([
			'version':project.version,
			'dlibversion':project.dlib_version,
			'mcversion':project.mc_version,
			'forgeversion':project.forge_version
		])
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
		exclude 'version.properties'
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allJava
	
	extension = 'jar'
	classifier = 'sources'
}

task apiJar(type: Jar, dependsOn: 'classes') {
		from sourceSets.main.allSource
		from sourceSets.main.output
		include 'com/shinoow/darknesslib/api/**'
	
	extension = 'jar'
	classifier = 'api'
}

artifacts {
    archives srcJar, apiJar
}

curseforge {
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : '' // gradle curse -Pcurseforge_key=your-api-key
	project{
		id = "349174" // http://minecraft.curseforge.com/mc-mods/"xxxxxx"-projectname
		releaseType = project.release_type //alpha beta release
		changelogType = 'html'
		changelog = new File('changelog.html') //must have at least an empty string
		addArtifact srcJar
        addArtifact apiJar
        relations {
			optionalDependency 'dynamic-lights'
            optionalDependency 'smooth-entity-light'
		}
	}
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran. 
build.dependsOn signJar